#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class resultBasic(object):
    """
    Attributes:
     - error
     - res

    """


    def __init__(self, error=None, res=None,):
        self.error = error
        self.res = res

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.res = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resultBasic')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.res is not None:
            oprot.writeFieldBegin('res', TType.DOUBLE, 2)
            oprot.writeDouble(self.res)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resultVector(object):
    """
    Attributes:
     - error
     - res

    """


    def __init__(self, error=None, res=None,):
        self.error = error
        self.res = res

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.res = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.res.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resultVector')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.res is not None:
            oprot.writeFieldBegin('res', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.res))
            for iter6 in self.res:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resultMatrix(object):
    """
    Attributes:
     - error
     - res

    """


    def __init__(self, error=None, res=None,):
        self.error = error
        self.res = res

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.error = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.res = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = []
                        (_etype16, _size13) = iprot.readListBegin()
                        for _i17 in range(_size13):
                            _elem18 = iprot.readI32()
                            _elem12.append(_elem18)
                        iprot.readListEnd()
                        self.res.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resultMatrix')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.I32, 1)
            oprot.writeI32(self.error)
            oprot.writeFieldEnd()
        if self.res is not None:
            oprot.writeFieldBegin('res', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.res))
            for iter19 in self.res:
                oprot.writeListBegin(TType.I32, len(iter19))
                for iter20 in iter19:
                    oprot.writeI32(iter20)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(resultBasic)
resultBasic.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'error', None, None, ),  # 1
    (2, TType.DOUBLE, 'res', None, None, ),  # 2
)
all_structs.append(resultVector)
resultVector.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'error', None, None, ),  # 1
    (2, TType.LIST, 'res', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(resultMatrix)
resultMatrix.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'error', None, None, ),  # 1
    (2, TType.LIST, 'res', (TType.LIST, (TType.I32, None, False), False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
